---
interface Props {
    articleClassForm?: string;
}

const { articleClassForm } = Astro.props;
const formKey = import.meta.env.KEY_FORM;
const API_KEY = import.meta.env.PUBLIC_API_FORM;

console.log('1', import.meta.env.API_KEY);
const hcaptchaSiteKey = import.meta.env.API_KEY;
console.log('2', hcaptchaSiteKey); // Tempora
---

<article class:list={[articleClassForm]}>
    <h2 class='prose-2xl pb-8 font-bold uppercase'>Kontakt</h2>

    <form
        action={API_KEY}
        method='POST'
        id='form'
        name='contact-form'
        class='needs-validation flex w-full flex-col rounded-lg'
        data-astro-reload
        novalidate
    >
        <!-- Add Web3Forms Access Key -->
        <input type='hidden' name='access_key' value={formKey} />

        <!-- Optional: Subject an be prefilled using type="hidden"
       or type="text" for normal user submitted input -->
        <input
            type='hidden'
            name='subject'
            value='New message from your website'
        />

        <!-- Optional: From Name you want to see in the email
       Default is "Notifications". you can overwrite here -->
        <input
            type='hidden'
            name='from_name'
            value='Birgit MATTHIAS - Malerei'
        />

        <!-- Honeypot Spam Protection -->
        <input type='checkbox' name='botcheck' class='hidden' hidden />

        <div class='relative mb-4'>
            <label for='email' class='prose-sm text-gray-600'>Email</label>
            <input
                type='email'
                id='email'
                name='email'
                required
                class='prose w-full rounded border border-gray-300 bg-white px-3 py-1 text-base text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-[#ec008c]/80 focus:ring-2 focus:ring-[#ec008c]/40'
            />
        </div>
        <div class='relative mb-4'>
            <label for='message' class='prose-sm text-gray-600'>Message</label>
            <textarea
                id='message'
                name='message'
                required
                maxlength='500'
                class='prose h-32 w-full resize-none rounded border border-gray-300 bg-white px-3 py-1 text-base text-gray-700 outline-none transition-colors duration-200 ease-in-out focus:border-[#ec008c]/80 focus:ring-2 focus:ring-[#ec008c]/40'
            ></textarea>
        </div>
        <!-- hCaptcha: Recommended for Advanced Spam Protection. -->
        <div class='h-captcha' data-captcha='true'></div>
        <button
            type='submit'
            class='prose rounded border-0 bg-[#ec008c]/50 px-6 py-2 text-lg font-bold uppercase text-white hover:bg-[#ec008c] focus:outline-none'
            >Send</button
        >
        <!-- redirect -->
        <input type='hidden' name='redirect' value='/success' />
        <input type='hidden' name='replyto' value='daniel@darayaq.de' />
    </form>
    <div id='result' class='mt-3 text-center'></div>
</article>

<style>
    .invalid-feedback,
    .empty-feedback {
        display: none;
    }

    .was-validated :placeholder-shown:invalid ~ .empty-feedback {
        display: block;
    }

    .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
        display: block;
    }

    .is-invalid,
    .was-validated :invalid {
        border-color: #dc3545;
    }
</style>

<!-- Required only if you are using hCaptcha or Advanced File Upload. -->
<script src='https://web3forms.com/client/script.js' async defer></script>

<!-- TODO: check this code is not being readed -->
<script is:inline>
    // use astro:page-load event if you are using View Transitions

    document.addEventListener(
        'DOMContentLoaded',
        () => {
            const form = document.getElementById('form');
            const result = document.getElementById('result');

            console.log({ form, result });
            form.addEventListener('submit', function (e) {
                e.preventDefault();
                form.classList.add('was-validated');
                if (!form.checkValidity()) {
                    form.querySelectorAll(':invalid')[0].focus();
                    return;
                }
                const formData = new FormData(form);
                const object = Object.fromEntries(formData);
                const json = JSON.stringify(object);
                console.log('json', json);

                console.log('API_KEY', API_KEY);
                result.innerHTML = 'Sending...';

                fetch(API_KEY, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        Accept: 'application/json',
                    },
                    body: json,
                })
                    .then(async (response) => {
                        let json = await response.json();
                        if (response.status == 200) {
                            result.classList.add('text-green-500');
                            result.innerHTML = json.message;
                            alert(json.message);
                        } else {
                            console.log(response);
                            result.classList.add('text-red-500');
                            result.innerHTML = json.message;
                        }
                    })
                    .catch((error) => {
                        console.log(error);
                        result.innerHTML = 'Something went wrong!';
                    })
                    .then(function () {
                        form.reset();
                        form.classList.remove('was-validated');
                        setTimeout(() => {
                            result.style.display = 'none';
                        }, 5000);
                    });
            });
        },
        { once: true }
    );
</script>
